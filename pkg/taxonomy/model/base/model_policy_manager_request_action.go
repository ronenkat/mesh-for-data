/*
 * Policy Manager Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package base

import (
	"encoding/json"
)

// PolicyManagerRequestAction struct for PolicyManagerRequestAction
type PolicyManagerRequestAction struct {
	ActionType         *ActionType `json:"actionType,omitempty"`
	ProcessingLocation *string     `json:"processingLocation,omitempty"`
}

// NewPolicyManagerRequestAction instantiates a new PolicyManagerRequestAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyManagerRequestAction() *PolicyManagerRequestAction {
	this := PolicyManagerRequestAction{}
	return &this
}

// NewPolicyManagerRequestActionWithDefaults instantiates a new PolicyManagerRequestAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyManagerRequestActionWithDefaults() *PolicyManagerRequestAction {
	this := PolicyManagerRequestAction{}
	return &this
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *PolicyManagerRequestAction) GetActionType() ActionType {
	if o == nil || o.ActionType == nil {
		var ret ActionType
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyManagerRequestAction) GetActionTypeOk() (*ActionType, bool) {
	if o == nil || o.ActionType == nil {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *PolicyManagerRequestAction) HasActionType() bool {
	if o != nil && o.ActionType != nil {
		return true
	}

	return false
}

// SetActionType gets a reference to the given ActionType and assigns it to the ActionType field.
func (o *PolicyManagerRequestAction) SetActionType(v ActionType) {
	o.ActionType = &v
}

// GetProcessingLocation returns the ProcessingLocation field value if set, zero value otherwise.
func (o *PolicyManagerRequestAction) GetProcessingLocation() string {
	if o == nil || o.ProcessingLocation == nil {
		var ret string
		return ret
	}
	return *o.ProcessingLocation
}

// GetProcessingLocationOk returns a tuple with the ProcessingLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyManagerRequestAction) GetProcessingLocationOk() (*string, bool) {
	if o == nil || o.ProcessingLocation == nil {
		return nil, false
	}
	return o.ProcessingLocation, true
}

// HasProcessingLocation returns a boolean if a field has been set.
func (o *PolicyManagerRequestAction) HasProcessingLocation() bool {
	if o != nil && o.ProcessingLocation != nil {
		return true
	}

	return false
}

// SetProcessingLocation gets a reference to the given string and assigns it to the ProcessingLocation field.
func (o *PolicyManagerRequestAction) SetProcessingLocation(v string) {
	o.ProcessingLocation = &v
}

func (o PolicyManagerRequestAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActionType != nil {
		toSerialize["actionType"] = o.ActionType
	}
	if o.ProcessingLocation != nil {
		toSerialize["processingLocation"] = o.ProcessingLocation
	}
	return json.Marshal(toSerialize)
}

type NullablePolicyManagerRequestAction struct {
	value *PolicyManagerRequestAction
	isSet bool
}

func (v NullablePolicyManagerRequestAction) Get() *PolicyManagerRequestAction {
	return v.value
}

func (v *NullablePolicyManagerRequestAction) Set(val *PolicyManagerRequestAction) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyManagerRequestAction) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyManagerRequestAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyManagerRequestAction(val *PolicyManagerRequestAction) *NullablePolicyManagerRequestAction {
	return &NullablePolicyManagerRequestAction{value: val, isSet: true}
}

func (v NullablePolicyManagerRequestAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyManagerRequestAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
