// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PolicyManagerServiceClient is the client API for PolicyManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyManagerServiceClient interface {
	GetPoliciesDecisions(ctx context.Context, in *ApplicationContext, opts ...grpc.CallOption) (*PoliciesDecisions, error)
}

type policyManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyManagerServiceClient(cc grpc.ClientConnInterface) PolicyManagerServiceClient {
	return &policyManagerServiceClient{cc}
}

func (c *policyManagerServiceClient) GetPoliciesDecisions(ctx context.Context, in *ApplicationContext, opts ...grpc.CallOption) (*PoliciesDecisions, error) {
	out := new(PoliciesDecisions)
	err := c.cc.Invoke(ctx, "/connectors.PolicyManagerService/GetPoliciesDecisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyManagerServiceServer is the server API for PolicyManagerService service.
// All implementations must embed UnimplementedPolicyManagerServiceServer
// for forward compatibility
type PolicyManagerServiceServer interface {
	GetPoliciesDecisions(context.Context, *ApplicationContext) (*PoliciesDecisions, error)
	mustEmbedUnimplementedPolicyManagerServiceServer()
}

// UnimplementedPolicyManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPolicyManagerServiceServer struct {
}

func (UnimplementedPolicyManagerServiceServer) GetPoliciesDecisions(context.Context, *ApplicationContext) (*PoliciesDecisions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoliciesDecisions not implemented")
}
func (UnimplementedPolicyManagerServiceServer) mustEmbedUnimplementedPolicyManagerServiceServer() {}

// UnsafePolicyManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyManagerServiceServer will
// result in compilation errors.
type UnsafePolicyManagerServiceServer interface {
	mustEmbedUnimplementedPolicyManagerServiceServer()
}

func RegisterPolicyManagerServiceServer(s grpc.ServiceRegistrar, srv PolicyManagerServiceServer) {
	s.RegisterService(&PolicyManagerService_ServiceDesc, srv)
}

func _PolicyManagerService_GetPoliciesDecisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServiceServer).GetPoliciesDecisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connectors.PolicyManagerService/GetPoliciesDecisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServiceServer).GetPoliciesDecisions(ctx, req.(*ApplicationContext))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyManagerService_ServiceDesc is the grpc.ServiceDesc for PolicyManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connectors.PolicyManagerService",
	HandlerType: (*PolicyManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPoliciesDecisions",
			Handler:    _PolicyManagerService_GetPoliciesDecisions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy_manager_service.proto",
}
