// Copyright 2020 IBM Corp.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.7.1
// source: dataset_details.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataStore_DataStoreType int32

const (
	DataStore_UNKNOWN DataStore_DataStoreType = 0
	DataStore_LOCAL   DataStore_DataStoreType = 1
	DataStore_S3      DataStore_DataStoreType = 2
	DataStore_DB2     DataStore_DataStoreType = 3
	DataStore_KAFKA   DataStore_DataStoreType = 4
)

// Enum value maps for DataStore_DataStoreType.
var (
	DataStore_DataStoreType_name = map[int32]string{
		0: "UNKNOWN",
		1: "LOCAL",
		2: "S3",
		3: "DB2",
		4: "KAFKA",
	}
	DataStore_DataStoreType_value = map[string]int32{
		"UNKNOWN": 0,
		"LOCAL":   1,
		"S3":      2,
		"DB2":     3,
		"KAFKA":   4,
	}
)

func (x DataStore_DataStoreType) Enum() *DataStore_DataStoreType {
	p := new(DataStore_DataStoreType)
	*p = x
	return p
}

func (x DataStore_DataStoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataStore_DataStoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataset_details_proto_enumTypes[0].Descriptor()
}

func (DataStore_DataStoreType) Type() protoreflect.EnumType {
	return &file_dataset_details_proto_enumTypes[0]
}

func (x DataStore_DataStoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataStore_DataStoreType.Descriptor instead.
func (DataStore_DataStoreType) EnumDescriptor() ([]byte, []int) {
	return file_dataset_details_proto_rawDescGZIP(), []int{5, 0}
}

type DataComponentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentType string `protobuf:"bytes,1,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"` // e.g., column
	//Named terms, that exist in Catalog toxonomy and the values for these terms
	//for columns we will have "SchemaDetails" key, that will include technical schema details for this column
	//TODO: Consider create special field for schema outside of metadata
	NamedMetadata map[string]string `protobuf:"bytes,2,rep,name=named_metadata,json=namedMetadata,proto3" json:"named_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//Tags - can be any free text added to a component (no taxonomy)
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DataComponentMetadata) Reset() {
	*x = DataComponentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataset_details_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataComponentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataComponentMetadata) ProtoMessage() {}

func (x *DataComponentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_dataset_details_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataComponentMetadata.ProtoReflect.Descriptor instead.
func (*DataComponentMetadata) Descriptor() ([]byte, []int) {
	return file_dataset_details_proto_rawDescGZIP(), []int{0}
}

func (x *DataComponentMetadata) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *DataComponentMetadata) GetNamedMetadata() map[string]string {
	if x != nil {
		return x.NamedMetadata
	}
	return nil
}

func (x *DataComponentMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DatasetMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetNamedMetadata map[string]string `protobuf:"bytes,1,rep,name=dataset_named_metadata,json=datasetNamedMetadata,proto3" json:"dataset_named_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//Tags - can be any free text added to a component (no taxonomy)
	DatasetTags []string `protobuf:"bytes,2,rep,name=dataset_tags,json=datasetTags,proto3" json:"dataset_tags,omitempty"`
	//metadata for each component in asset. In tabular data each column is a component, then we will have: column name -> column metadata
	ComponentsMetadata map[string]*DataComponentMetadata `protobuf:"bytes,3,rep,name=components_metadata,json=componentsMetadata,proto3" json:"components_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DatasetMetadata) Reset() {
	*x = DatasetMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataset_details_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetMetadata) ProtoMessage() {}

func (x *DatasetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_dataset_details_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetMetadata.ProtoReflect.Descriptor instead.
func (*DatasetMetadata) Descriptor() ([]byte, []int) {
	return file_dataset_details_proto_rawDescGZIP(), []int{1}
}

func (x *DatasetMetadata) GetDatasetNamedMetadata() map[string]string {
	if x != nil {
		return x.DatasetNamedMetadata
	}
	return nil
}

func (x *DatasetMetadata) GetDatasetTags() []string {
	if x != nil {
		return x.DatasetTags
	}
	return nil
}

func (x *DatasetMetadata) GetComponentsMetadata() map[string]*DataComponentMetadata {
	if x != nil {
		return x.ComponentsMetadata
	}
	return nil
}

type Db2DataStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	Table    string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"` // reformat to SCHEMA.TABLE struct
	Port     string `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	Ssl      string `protobuf:"bytes,5,opt,name=ssl,proto3" json:"ssl,omitempty"` //Note that bool value if set to "false" does not appear in the struct at all
}

func (x *Db2DataStore) Reset() {
	*x = Db2DataStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataset_details_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Db2DataStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Db2DataStore) ProtoMessage() {}

func (x *Db2DataStore) ProtoReflect() protoreflect.Message {
	mi := &file_dataset_details_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Db2DataStore.ProtoReflect.Descriptor instead.
func (*Db2DataStore) Descriptor() ([]byte, []int) {
	return file_dataset_details_proto_rawDescGZIP(), []int{2}
}

func (x *Db2DataStore) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Db2DataStore) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Db2DataStore) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Db2DataStore) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Db2DataStore) GetSsl() string {
	if x != nil {
		return x.Ssl
	}
	return ""
}

type S3DataStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint  string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Bucket    string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	ObjectKey string `protobuf:"bytes,3,opt,name=object_key,json=objectKey,proto3" json:"object_key,omitempty"` //can be object name or the prefix for dataset
	Region    string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`                        // WKC does not return it, it will stay empty in our case!!!
}

func (x *S3DataStore) Reset() {
	*x = S3DataStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataset_details_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3DataStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3DataStore) ProtoMessage() {}

func (x *S3DataStore) ProtoReflect() protoreflect.Message {
	mi := &file_dataset_details_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3DataStore.ProtoReflect.Descriptor instead.
func (*S3DataStore) Descriptor() ([]byte, []int) {
	return file_dataset_details_proto_rawDescGZIP(), []int{3}
}

func (x *S3DataStore) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *S3DataStore) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *S3DataStore) GetObjectKey() string {
	if x != nil {
		return x.ObjectKey
	}
	return ""
}

func (x *S3DataStore) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type KafkaDataStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicName             string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	BootstrapServers      string `protobuf:"bytes,2,opt,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	SchemaRegistry        string `protobuf:"bytes,3,opt,name=schema_registry,json=schemaRegistry,proto3" json:"schema_registry,omitempty"`
	KeyDeserializer       string `protobuf:"bytes,4,opt,name=key_deserializer,json=keyDeserializer,proto3" json:"key_deserializer,omitempty"`
	ValueDeserializer     string `protobuf:"bytes,5,opt,name=value_deserializer,json=valueDeserializer,proto3" json:"value_deserializer,omitempty"`
	SecurityProtocol      string `protobuf:"bytes,6,opt,name=security_protocol,json=securityProtocol,proto3" json:"security_protocol,omitempty"`
	SaslMechanism         string `protobuf:"bytes,7,opt,name=sasl_mechanism,json=saslMechanism,proto3" json:"sasl_mechanism,omitempty"`
	SslTruststore         string `protobuf:"bytes,8,opt,name=ssl_truststore,json=sslTruststore,proto3" json:"ssl_truststore,omitempty"`
	SslTruststorePassword string `protobuf:"bytes,9,opt,name=ssl_truststore_password,json=sslTruststorePassword,proto3" json:"ssl_truststore_password,omitempty"`
}

func (x *KafkaDataStore) Reset() {
	*x = KafkaDataStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataset_details_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaDataStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaDataStore) ProtoMessage() {}

func (x *KafkaDataStore) ProtoReflect() protoreflect.Message {
	mi := &file_dataset_details_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaDataStore.ProtoReflect.Descriptor instead.
func (*KafkaDataStore) Descriptor() ([]byte, []int) {
	return file_dataset_details_proto_rawDescGZIP(), []int{4}
}

func (x *KafkaDataStore) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *KafkaDataStore) GetBootstrapServers() string {
	if x != nil {
		return x.BootstrapServers
	}
	return ""
}

func (x *KafkaDataStore) GetSchemaRegistry() string {
	if x != nil {
		return x.SchemaRegistry
	}
	return ""
}

func (x *KafkaDataStore) GetKeyDeserializer() string {
	if x != nil {
		return x.KeyDeserializer
	}
	return ""
}

func (x *KafkaDataStore) GetValueDeserializer() string {
	if x != nil {
		return x.ValueDeserializer
	}
	return ""
}

func (x *KafkaDataStore) GetSecurityProtocol() string {
	if x != nil {
		return x.SecurityProtocol
	}
	return ""
}

func (x *KafkaDataStore) GetSaslMechanism() string {
	if x != nil {
		return x.SaslMechanism
	}
	return ""
}

func (x *KafkaDataStore) GetSslTruststore() string {
	if x != nil {
		return x.SslTruststore
	}
	return ""
}

func (x *KafkaDataStore) GetSslTruststorePassword() string {
	if x != nil {
		return x.SslTruststorePassword
	}
	return ""
}

type DataStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type DataStore_DataStoreType `protobuf:"varint,1,opt,name=type,proto3,enum=connectors.DataStore_DataStoreType" json:"type,omitempty"`
	Name string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` //for auditing and readability. Can be same as location type or can have more info if availble from catalog
	// oneof location {   // should have been oneof but for technical rasons, a problem to translate it to JSON, we remove the oneof for now
	//should have been local, db2, s3 without "location"  but had a problem to compile it in proto - collision with proto name DataLocationDb2
	Db2   *Db2DataStore   `protobuf:"bytes,3,opt,name=db2,proto3" json:"db2,omitempty"`
	S3    *S3DataStore    `protobuf:"bytes,4,opt,name=s3,proto3" json:"s3,omitempty"`
	Kafka *KafkaDataStore `protobuf:"bytes,5,opt,name=kafka,proto3" json:"kafka,omitempty"`
}

func (x *DataStore) Reset() {
	*x = DataStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataset_details_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataStore) ProtoMessage() {}

func (x *DataStore) ProtoReflect() protoreflect.Message {
	mi := &file_dataset_details_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataStore.ProtoReflect.Descriptor instead.
func (*DataStore) Descriptor() ([]byte, []int) {
	return file_dataset_details_proto_rawDescGZIP(), []int{5}
}

func (x *DataStore) GetType() DataStore_DataStoreType {
	if x != nil {
		return x.Type
	}
	return DataStore_UNKNOWN
}

func (x *DataStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataStore) GetDb2() *Db2DataStore {
	if x != nil {
		return x.Db2
	}
	return nil
}

func (x *DataStore) GetS3() *S3DataStore {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *DataStore) GetKafka() *KafkaDataStore {
	if x != nil {
		return x.Kafka
	}
	return nil
}

type CredentialsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VaultSecretPath string `protobuf:"bytes,1,opt,name=vault_secret_path,json=vaultSecretPath,proto3" json:"vault_secret_path,omitempty"` // the path to Vault secret which is used to retrive the dataset credentials from the catalog.
}

func (x *CredentialsInfo) Reset() {
	*x = CredentialsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataset_details_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialsInfo) ProtoMessage() {}

func (x *CredentialsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dataset_details_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialsInfo.ProtoReflect.Descriptor instead.
func (*CredentialsInfo) Descriptor() ([]byte, []int) {
	return file_dataset_details_proto_rawDescGZIP(), []int{6}
}

func (x *CredentialsInfo) GetVaultSecretPath() string {
	if x != nil {
		return x.VaultSecretPath
	}
	return ""
}

type DatasetDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                            //name in Catalog
	DataOwner  string     `protobuf:"bytes,2,opt,name=data_owner,json=dataOwner,proto3" json:"data_owner,omitempty"` //information on the owner of data asset - can have different formats for different catalogs
	DataStore  *DataStore `protobuf:"bytes,3,opt,name=data_store,json=dataStore,proto3" json:"data_store,omitempty"` //All info about the data store
	DataFormat string     `protobuf:"bytes,4,opt,name=data_format,json=dataFormat,proto3" json:"data_format,omitempty"`
	Geo        string     `protobuf:"bytes,5,opt,name=geo,proto3" json:"geo,omitempty"` //geography location where data resides (if this information available)
	//LocationType locationType = 10;  //publicCloud/privateCloud etc. Should be filled later when we understand better if we have a closed set of values and how they are used.
	Metadata        *DatasetMetadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	CredentialsInfo *CredentialsInfo `protobuf:"bytes,11,opt,name=credentials_info,json=credentialsInfo,proto3" json:"credentials_info,omitempty"` // information about how to retrive dataset credentials from the catalog.
}

func (x *DatasetDetails) Reset() {
	*x = DatasetDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataset_details_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetDetails) ProtoMessage() {}

func (x *DatasetDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dataset_details_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetDetails.ProtoReflect.Descriptor instead.
func (*DatasetDetails) Descriptor() ([]byte, []int) {
	return file_dataset_details_proto_rawDescGZIP(), []int{7}
}

func (x *DatasetDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatasetDetails) GetDataOwner() string {
	if x != nil {
		return x.DataOwner
	}
	return ""
}

func (x *DatasetDetails) GetDataStore() *DataStore {
	if x != nil {
		return x.DataStore
	}
	return nil
}

func (x *DatasetDetails) GetDataFormat() string {
	if x != nil {
		return x.DataFormat
	}
	return ""
}

func (x *DatasetDetails) GetGeo() string {
	if x != nil {
		return x.Geo
	}
	return ""
}

func (x *DatasetDetails) GetMetadata() *DatasetMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DatasetDetails) GetCredentialsInfo() *CredentialsInfo {
	if x != nil {
		return x.CredentialsInfo
	}
	return nil
}

var File_dataset_details_proto protoreflect.FileDescriptor

var file_dataset_details_proto_rawDesc = []byte{
	0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xba, 0x03, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6b, 0x0a, 0x16, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x64, 0x0a, 0x13, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x47, 0x0a, 0x19, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a, 0x17, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x78, 0x0a, 0x0c, 0x44, 0x62, 0x32, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x73, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x73, 0x6c, 0x22, 0x78,
	0x0a, 0x0b, 0x53, 0x33, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x03, 0x0a, 0x0e, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x12, 0x29, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x44,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x73, 0x6c, 0x5f,
	0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x61, 0x73, 0x6c, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x73, 0x6c, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x73, 0x6c, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x73, 0x6c, 0x5f, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x73, 0x6c, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xa4, 0x02,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x64, 0x62, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x44, 0x62, 0x32, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x03, 0x64, 0x62, 0x32, 0x12, 0x27, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x33,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x02, 0x73, 0x33, 0x12, 0x30, 0x0a,
	0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x22,
	0x43, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x33, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x44, 0x42, 0x32, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x41, 0x46,
	0x4b, 0x41, 0x10, 0x04, 0x22, 0x3d, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x22, 0xad, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67,
	0x65, 0x6f, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x10, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x4d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x6d, 0x65,
	0x73, 0x68, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x65, 0x73, 0x68, 0x2d, 0x66, 0x6f, 0x72, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6d, 0x65, 0x73,
	0x68, 0x2d, 0x66, 0x6f, 0x72, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataset_details_proto_rawDescOnce sync.Once
	file_dataset_details_proto_rawDescData = file_dataset_details_proto_rawDesc
)

func file_dataset_details_proto_rawDescGZIP() []byte {
	file_dataset_details_proto_rawDescOnce.Do(func() {
		file_dataset_details_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataset_details_proto_rawDescData)
	})
	return file_dataset_details_proto_rawDescData
}

var file_dataset_details_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataset_details_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_dataset_details_proto_goTypes = []interface{}{
	(DataStore_DataStoreType)(0),  // 0: connectors.DataStore.DataStoreType
	(*DataComponentMetadata)(nil), // 1: connectors.DataComponentMetadata
	(*DatasetMetadata)(nil),       // 2: connectors.DatasetMetadata
	(*Db2DataStore)(nil),          // 3: connectors.Db2DataStore
	(*S3DataStore)(nil),           // 4: connectors.S3DataStore
	(*KafkaDataStore)(nil),        // 5: connectors.KafkaDataStore
	(*DataStore)(nil),             // 6: connectors.DataStore
	(*CredentialsInfo)(nil),       // 7: connectors.CredentialsInfo
	(*DatasetDetails)(nil),        // 8: connectors.DatasetDetails
	nil,                           // 9: connectors.DataComponentMetadata.NamedMetadataEntry
	nil,                           // 10: connectors.DatasetMetadata.DatasetNamedMetadataEntry
	nil,                           // 11: connectors.DatasetMetadata.ComponentsMetadataEntry
}
var file_dataset_details_proto_depIdxs = []int32{
	9,  // 0: connectors.DataComponentMetadata.named_metadata:type_name -> connectors.DataComponentMetadata.NamedMetadataEntry
	10, // 1: connectors.DatasetMetadata.dataset_named_metadata:type_name -> connectors.DatasetMetadata.DatasetNamedMetadataEntry
	11, // 2: connectors.DatasetMetadata.components_metadata:type_name -> connectors.DatasetMetadata.ComponentsMetadataEntry
	0,  // 3: connectors.DataStore.type:type_name -> connectors.DataStore.DataStoreType
	3,  // 4: connectors.DataStore.db2:type_name -> connectors.Db2DataStore
	4,  // 5: connectors.DataStore.s3:type_name -> connectors.S3DataStore
	5,  // 6: connectors.DataStore.kafka:type_name -> connectors.KafkaDataStore
	6,  // 7: connectors.DatasetDetails.data_store:type_name -> connectors.DataStore
	2,  // 8: connectors.DatasetDetails.metadata:type_name -> connectors.DatasetMetadata
	7,  // 9: connectors.DatasetDetails.credentials_info:type_name -> connectors.CredentialsInfo
	1,  // 10: connectors.DatasetMetadata.ComponentsMetadataEntry.value:type_name -> connectors.DataComponentMetadata
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_dataset_details_proto_init() }
func file_dataset_details_proto_init() {
	if File_dataset_details_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dataset_details_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataComponentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataset_details_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataset_details_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Db2DataStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataset_details_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3DataStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataset_details_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaDataStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataset_details_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataset_details_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataset_details_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataset_details_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dataset_details_proto_goTypes,
		DependencyIndexes: file_dataset_details_proto_depIdxs,
		EnumInfos:         file_dataset_details_proto_enumTypes,
		MessageInfos:      file_dataset_details_proto_msgTypes,
	}.Build()
	File_dataset_details_proto = out.File
	file_dataset_details_proto_rawDesc = nil
	file_dataset_details_proto_goTypes = nil
	file_dataset_details_proto_depIdxs = nil
}
